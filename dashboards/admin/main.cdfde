{
 "components": {
  "rows": [
   {
    "id": "OTHERCOMPONENTS",
    "name": "Others",
    "parent": "UnIqEiD",
    "properties": [
     {
      "name": "Group",
      "type": "Label",
      "value": "Others"
     }
    ],
    "type": "Label",
    "typeDesc": "<i>Group</i>"
   },
   {
    "id": "56b09d0c-32e4-2c01-3564-d9e55b743075",
    "parent": "OTHERCOMPONENTS",
    "properties": [
     {
      "name": "name",
      "type": "Id",
      "value": "includeButton"
     },
     {
      "name": "label",
      "type": "String",
      "value": "Include ATOL C&D input types"
     },
     {
      "name": "listeners",
      "type": "Listeners",
      "value": "[]"
     },
     {
      "name": "actionParameters",
      "type": "ValuesArray",
      "value": "[]"
     },
     {
      "name": "expression",
      "type": "JavaScript",
      "value": "function() {\n    var dialog = Dashboards.getComponentByName('${c:dialog}');\n    \n    sparkl.runEndpoint('atolcd', 'includeAtolcdInputTypes', {\n        success: function(data) {\n            Dashboards.decrementRunningCalls();\n            \n            var message = 'ATOL C&D input types included.';\n            \n            if (data.resultset.length > 0) {\n                var resColNum = data.metadata.filter(function(column) {\n                    return column.colName == 'result';\n                })[0].colIndex;\n                \n                if (typeof resColNum !== 'undefined') {\n                    var contains = data.resultset[0][resColNum];\n                    \n                    if (contains == 'contains') {\n                        message = 'ATOL C&D input types already included.';\n                    }\n                }\n            } else {\n                message = 'Transformation configuration error.';\n            }\n            \n            dialog.open({\n                message: message,\n                dialogClass: 'closeButtonVisible'\n            });\n        },\n        error: function() {\n            Dashboards.decrementRunningCalls();\n            dialog.open({\n                message: 'Error while checking ATOL C&D input types inclusion.',\n                dialogClass: 'closeButtonVisible'\n            });\n        }    \n    });\n} "
     },
     {
      "name": "failureCallback",
      "type": "JavaScript",
      "value": ""
     },
     {
      "name": "successCallback",
      "type": "JavaScript",
      "value": ""
     },
     {
      "name": "dataSource",
      "type": "Datasource",
      "value": ""
     },
     {
      "name": "priority",
      "type": "Integer",
      "value": 5
     },
     {
      "name": "refreshPeriod",
      "type": "Integer",
      "value": ""
     },
     {
      "name": "buttonStyle",
      "type": "TableStyle",
      "value": ""
     },
     {
      "name": "htmlObject",
      "type": "HtmlObject",
      "value": "${h:buttonColumn}"
     },
     {
      "name": "executeAtStart",
      "type": "Boolean",
      "value": "true"
     },
     {
      "name": "preExecution",
      "type": "JavaScript",
      "value": ""
     },
     {
      "name": "postExecution",
      "type": "JavaScript",
      "value": ""
     },
     {
      "name": "tooltip",
      "type": "Html",
      "value": ""
     }
    ],
    "rowName": "Button Component",
    "type": "ComponentsbuttonComponent",
    "typeDesc": "Button Component"
   },
   {
    "id": "f3824631-24ef-8da5-e60f-0fc839914af1",
    "parent": "OTHERCOMPONENTS",
    "properties": [
     {
      "name": "name",
      "type": "Id",
      "value": "dialog"
     },
     {
      "name": "listeners",
      "type": "Listeners",
      "value": "[]"
     },
     {
      "name": "expression",
      "type": "JavaScript",
      "value": "function f() {\n    this.open = function(opts) {\n        /*default opts*/\n        var dialogOpts = {\n            dialogClass: \"confirmationDialog\",\n            modal: true,\n            resizable: false,\n            draggable: false,\n            title: \"Confirmation Message\",\n            buttons: [\n                {\n                    text: \"OK\",\n                    click: function() {\n                        $(this).dialog(\"close\");\n                    }\n                }\n            ]\n        };\n        \n        /*merge of defaults with user custom opts*/\n        $.extend(dialogOpts, opts); \n        /*method's action*/\n        $(\"#\" + this.htmlObject).dialog(dialogOpts);\n        $(\"#\" + this.htmlObject).empty().append($(\"<span>\" + dialogOpts.message + \"</span>\"));\n    };\n    \n    this.close = function(opts) {\n        $(\"#\" + this.htmlObject).dialog('close');\n    };\n} "
     },
     {
      "name": "priority",
      "type": "Integer",
      "value": 5
     },
     {
      "name": "refreshPeriod",
      "type": "Integer",
      "value": ""
     },
     {
      "name": "htmlObject",
      "type": "HtmlObject",
      "value": "${h:dialogObject}"
     },
     {
      "name": "executeAtStart",
      "type": "Boolean",
      "value": "true"
     },
     {
      "name": "preExecution",
      "type": "JavaScript",
      "value": ""
     },
     {
      "name": "postExecution",
      "type": "JavaScript",
      "value": ""
     },
     {
      "name": "tooltip",
      "type": "Html",
      "value": ""
     }
    ],
    "rowName": "Text Component",
    "type": "ComponentstextComponent",
    "typeDesc": "Text Component"
   }
  ]
 },
 "datasources": {
  "rows": [
   {
    "id": "ATOLCD_CPKENDPOINTS",
    "name": "ATOLCD Endpoints",
    "parent": "UnIqEiD",
    "properties": [
     {
      "name": "Group",
      "type": "Label",
      "value": "ATOLCD Endpoints"
     }
    ],
    "type": "Label",
    "typeDesc": "<i>Group</i>"
   },
   {
    "id": "f2f0e205-3654-ca0d-4d78-28a6e0d066fc",
    "meta": "CPK",
    "meta_endpoint": "includeAtolcdInputTypes",
    "meta_pluginId": "atolcd",
    "parent": "ATOLCD_CPKENDPOINTS",
    "properties": [
     {
      "name": "name",
      "type": "Id",
      "value": "includeAtolcdInputTypesEndpoint"
     },
     {
      "name": "stepName",
      "type": "String",
      "value": "OUTPUT"
     },
     {
      "name": "kettleOutput",
      "type": "kettleOutputCustom",
      "value": "Inferred"
     }
    ],
    "rowName": "includeAtolcdInputTypes Endpoint",
    "type": "Componentsatolcd_includeAtolcdInputTypes_CPKENDPOINT",
    "typeDesc": "includeAtolcdInputTypes Endpoint"
   }
  ]
 },
 "filename": "/system/atolcd/dashboards/admin/main.cdfde",
 "layout": {
  "rows": [
   {
    "id": "f68ec166-516b-9220-4f9f-60dad90e9437",
    "type": "LayoutResourceCode",
    "typeDesc": "Resource",
    "parent": "UnIqEiD",
    "properties": [
     {
      "name": "name",
      "value": "sparklJs",
      "type": "Id"
     },
     {
      "name": "resourceCode",
      "value": "/********************************** Project namespace *******************************************/\nvar sparkl = {};\n(function(myself) {\n\n    var _settings = {\n        expressions: {\n            element: /^[A-Za-z][A-Za-z\\d]*$/,\n            plugin: /^[A-Za-z][A-Za-z\\d]*$/,\n            image: /\\.(png|jpg)$/,\n            zip: /\\.(zip)$/\n        },\n        reservedNames: [\n            'status', 'refresh', 'reload'\n        ]\n    };\n\n    myself.getSettings = function() {\n        var acc = _settings;\n        _.every(arguments, function(el) {\n            acc = acc[el] || undefined;\n            return !!acc;\n        });\n        return acc;\n    };\n\n\n    myself.changeLocation = function(newLocation, bookmarks, isNew) {\n        if (!newLocation) {\n            return;\n        }\n        var hash = (bookmarks && !_.isEmpty(bookmarks)) ? '#' + generateHashValue(\"bookmark\", {\n            impl: \"client\",\n            params: bookmarks\n        }) : \"\";\n        if (isNew) {\n            window.open(newLocation + hash);\n        } else {\n            window.location = newLocation + hash;\n        }\n    };\n\n    function generateHashValue(key, value) {\n        var obj = Dashboards.getHashValue(),\n            json;\n        if (arguments.length == 1) {\n            obj = key;\n        } else {\n            obj[key] = value;\n        }\n        json = JSON.stringify(obj);\n        return json;\n    }\n\n    myself.isValidName = function(name, type) {\n        var reg = _settings.expressions[type || 'plugin'] || /.*/;\n        return reg.test(name);\n    };\n\n\n    myself.isUpdated = function(srcVersion, pluginVersion) {\n        return (srcVersion == pluginVersion);\n    };\n\n\n    myself.isJobError = function(json) {\n        return (json && json.result === false);\n    };\n\n    myself.hasUploaderComponent = function() {\n        return !(typeof FileUploaderComponent == 'undefined');\n    };\n\n\n    myself.createElementsTableEmptyRawData = function() {\n        var emptyData = {\n            metadata: [{\n                colIndex: 0,\n                colType: 'String',\n                colName: 'elementName'\n            }, {\n                colIndex: 1,\n                colType: 'String',\n                colName: 'elementType'\n            }, {\n                colIndex: 2,\n                colType: 'Boolean',\n                colName: 'adminOnly'\n            }, {\n                colIndex: 3,\n                colType: 'String',\n                colName: 'fileName'\n            }, {\n                colIndex: 4,\n                colType: 'String',\n                colName: 'elementName'\n            }],\n            queryInfo: {\n                totalRows: 0\n            },\n            resultset: []\n        };\n        return emptyData;\n    };\n\n\n    myself.addUploadForm = function(ph, opts) {\n\n        var _opts = {\n            root: '.',\n            success: function(filename) {\n                Dashboards.log('File uploaded');\n            },\n            uploadError: function() {\n                Dashboards.log('Error uploading file');\n            },\n            validationError: function() {\n                Dashboards.log('File type not allowed.');\n            },\n            isValidFilename: function(filename) {\n                var reg = myself.getSettings('expressions', 'image');\n                return reg.test(filename);\n            }\n        };\n\n        opts = _.extend({}, _opts, opts);\n\n        var $ph = $(ph),\n            $uploadForm = $('<form action=\"'+ Dashboards.getWebAppPath()+ '/plugin/cfr/api/store\" method=\"post\" enctype=\"multipart/form-data\">').addClass('WDhidden'),\n            filename = '';\n\n        var validateForm = function() {\n            if (opts.isValidFilename(filename)) {\n                return true;\n            } else {\n                opts.validationError();\n                return false;\n            }\n        };\n\n        var resetUploadForm = function() {\n            $fileInput.val('');\n            filename = '';\n        };\n\n        var fileUploaded = function(response) {\n            if (response.result) {\n                opts.success(filename);\n                resetUploadForm(filename);\n            } else {\n                opts.uploadError(filename);\n            }\n        };\n\n        // configure file upload form\n        $uploadForm.ajaxForm({\n            dataType: 'json',\n            success: fileUploaded,\n            error: opts.uploadError,\n            beforeSubmit: validateForm\n        });\n\n        $ph.append($uploadForm);\n\n        var $fileInput = $('<input type=\"file\" class=\"file\" name=\"file\" required/>').appendTo($uploadForm),\n            $pathInput = $('<input type=\"hidden\" name=\"path\" value=\"' + opts.root + '\"/>').appendTo($uploadForm),\n            $submitInput = $('<button type=\"submit\">').appendTo($uploadForm);\n\n        $fileInput.attr(\"id\", this.htmlObject + \"_file\");\n        $fileInput.change(function() {\n            if ($fileInput.val() !== \"\") {\n                filename = $fileInput.val();\n                if (filename.slice(3, 11) == \"fakepath\") {\n                    filename = filename.slice(12, filename.length);\n                }\n                $submitInput.click();\n            }\n        });\n\n        return function() {\n            $fileInput.click();\n        };\n    };\n\n\n    myself.testFile = function(url, successCallback, errorCallback) {\n        successCallback = successCallback || function() {\n            return true;\n        };\n        errorCallback = errorCallback || function() {\n            return true;\n        };\n        $.ajax({\n            url: url,\n            type: 'HEAD',\n            error: errorCallback,\n            success: successCallback\n        });\n    };\n\n\n\n    myself.runEndpoint = function(pluginId, endpoint, opts0) {\n\n        if (!pluginId && !endpoint) {\n            Dashboards.log('PluginId or endpointName not defined.');\n            return false;\n        }\n\n        var _opts = {\n            success: function() {\n                Dashboards.log(pluginId + ': ' + endpoint + ' ran successfully.');\n            },\n            error: function() {\n                Dashboards.log(pluginId + ': error running ' + endpoint + '.');\n            },\n            params: {},\n            systemParams: {},\n            type: 'POST',\n            dataType: 'json'\n        };\n        var opts = $.extend({}, _opts, opts0);\n        var url = Dashboards.getWebAppPath() + '/plugin/' + pluginId + '/api/' + endpoint;\n\n        function successHandler(json) {\n            if (json && json.result == false) {\n                opts.error.apply(this, arguments);\n            } else {\n                opts.success.apply(this, arguments);\n            }\n        }\n\n        function errorHandler() {\n            opts.error.apply(this, arguments);\n        }\n        var ajaxOpts;\n        if (endpoint != 'renderer/refresh') { //XXX - do this better\n            ajaxOpts = {\n                url: url,\n                async: true,\n                type: opts.type,\n                dataType: opts.dataType,\n                success: successHandler,\n                error: errorHandler,\n                data: {}\n            };\n        } else {\n            ajaxOpts = {\n                url: url,\n                async: true,\n                type: 'GET',\n                dataType: opts.dataType,\n                success: successHandler,\n                error: errorHandler,\n                data: {}\n            };\n        }\n\n        _.each(opts.params, function(value, key) {\n            ajaxOpts.data['param' + key] = value;\n        });\n        _.each(opts.systemParams, function(value, key) {\n            ajaxOpts.data[key] = value;\n        });\n\n        $.ajax(ajaxOpts);\n    };\n\n    myself.getEndpointCaller = function(pluginId, endpoint, opts) {\n        var myself = this;\n        return function(callback, errorCallback, params) {\n            var _opts = $.extend({}, opts);\n            _opts.params = params || _opts.params;\n            _opts.success = callback || _opts.success;\n            _opts.error = errorCallback || _opts.error;\n            myself.runEndpoint(pluginId, endpoint, _opts);\n        };\n    };\n\n    myself.publishToServer = function(callback) {\n        $.ajax({\n            url: Dashboards.getWebAppPath() + '/plugin/sparkl/api/reloadPlugins',\n            type: 'POST',\n            data: {\n                'publish': 'now',\n                'class': 'org.pentaho.platform.plugin.services.pluginmgr.PluginAdapter'\n            },\n            success: callback\n        });\n    };\n\n    myself.addCallWrapper = function(caller, callback) {\n        return function(json) {\n            caller(callback);\n        };\n    };\n    myself.addRefreshWrapper = function(pluginId, callback) {\n        if (pluginId != 'pentaho-cdf-dd') { //XXX - do this better\n            var caller = this.getEndpointCaller(pluginId, 'refresh', {\n                dataType: 'text'\n            });\n        } else {\n            var caller = this.getEndpointCaller(pluginId, 'renderer/refresh', {\n                dataType: 'text'\n            });\n        }\n        return this.addCallWrapper(caller, callback);\n    };\n    myself.addPublishWrapper = function(callback) {\n        // HACK: This call is only here because cpk is acting weird after a publish. Remove when bug\n        // on cpk is found!!!\n        var cb = function() {\n            $.ajax({\n                url: Dashboards.getWebAppPath() + '/plugin/sparkl/api/getpluginmetadata',\n                type: 'GET',\n                async: true,\n                success: callback,\n                error: callback\n            });\n        };\n        return this.addCallWrapper(this.publishToServer, cb);\n    };\n\n})(sparkl);\n\n/************************************  AddIns ************************************/\n\n\n(function() {\n\n    var actionButtonsOpts = {\n        name: \"actionButtons\",\n        label: \"Action Buttons\",\n        defaults: {\n            buttons: [{\n                cssClass: \"viewButton\",\n                title: \"View\",\n                tooltip: \"View\",\n                action: function(v, st) {\n                    Dashboards.log(v);\n                }\n            }]\n        },\n\n        init: function() {\n            $.fn.dataTableExt.oSort[this.name + '-asc'] = $.fn.dataTableExt.oSort['string-asc'];\n            $.fn.dataTableExt.oSort[this.name + '-desc'] = $.fn.dataTableExt.oSort['string-desc'];\n        },\n\n        implementation: function(tgt, st, opt) {\n            var $buttonContainer = $('<div/>').addClass('buttonContainer')\n                .addClass('numButtons-' + opt.buttons.length);\n            _.each(opt.buttons, function(el, idx) {\n                var $button = $(\"<button/>\").addClass(el.cssClass || \"\").text(el.title || \"\").attr('title', el.tooltip || \"\");\n                $button.click(function() {\n                    if (el.action) {\n                        el.action(st.value, st);\n                    }\n                });\n                $buttonContainer.append($button);\n            });\n            $(tgt).empty().append($buttonContainer);\n\n        }\n\n    };\n    Dashboards.registerAddIn(\"Table\", \"colType\", new AddIn(actionButtonsOpts));\n\n\n    /* edit data of table  */\n    var editable = {\n        name: \"editable\",\n        label: \"Editable\",\n        defaults: {\n            action: function(v, st) {\n                Dashboards.log(v);\n            }\n        },\n        init: function() {\n\n            // Register this for datatables sort\n            var myself = this;\n            $.fn.dataTableExt.oSort[this.name + '-asc'] = function(a, b) {\n                return myself.sort(a, b);\n            };\n            $.fn.dataTableExt.oSort[this.name + '-desc'] = function(a, b) {\n                return myself.sort(b, a);\n            };\n        },\n        sort: function(a, b) {\n            return this.sumStrArray(a) - this.sumStrArray(b);\n        },\n\n        implementation: function(tgt, st, opt) {\n            var t = $(tgt);\n            var value = st.value;\n            var text = $(\"<input/>\").attr({\n                'value': value,\n                'type': 'text',\n                'class': 'editBox'\n            })\n                .keyup(function(event) {\n                    if (event.keyCode == 13) {\n                        opt.action($(this).val(), st);\n                    }\n                    /*var idx = this.parentNode.parentNode.rowIndex;\n      metadataParam[idx-1][1] = $(this).val();*/\n                    var obj = this.parentNode.parentNode.children[0].textContent;\n                    metadataParam[obj.toString()] = $(this).val();\n                });\n\n            t.empty();\n            t.append(text);\n        }\n    };\n    Dashboards.registerAddIn(\"Table\", \"colType\", new AddIn(editable));\n\n})();\n\n$(document).ready(function() {\n    $('.chzn-results li').click(function() {\n        $(this).closest('.chzn-results').find('.result-relected').removeClass('result-selected');\n    });\n}); ",
      "type": "Resource"
     },
     {
      "name": "resourceType",
      "value": "Javascript",
      "type": "Label"
     }
    ]
   },
   {
    "id": "9a08f60a-cef9-6290-c4a9-7e1c7e28859c",
    "parent": "UnIqEiD",
    "properties": [
     {
      "name": "name",
      "type": "Id",
      "value": "buttonRow"
     },
     {
      "name": "height",
      "type": "Integer",
      "value": ""
     },
     {
      "name": "backgroundColor",
      "type": "Color",
      "value": ""
     },
     {
      "name": "roundCorners",
      "type": "RoundCorners",
      "value": ""
     },
     {
      "name": "textAlign",
      "type": "TextAlign",
      "value": ""
     },
     {
      "name": "cssClass",
      "type": "String",
      "value": ""
     }
    ],
    "type": "LayoutRow",
    "typeDesc": "Row"
   },
   {
    "id": "f6c078bf-338c-d5d3-d56a-3f4edcdd18f0",
    "parent": "9a08f60a-cef9-6290-c4a9-7e1c7e28859c",
    "properties": [
     {
      "name": "name",
      "type": "Id",
      "value": "buttonColumn"
     },
     {
      "name": "columnSpan",
      "type": "Integer",
      "value": 5
     },
     {
      "name": "columnPrepend",
      "type": "Integer",
      "value": ""
     },
     {
      "name": "columnAppend",
      "type": "Integer",
      "value": ""
     },
     {
      "name": "columnPrependTop",
      "type": "Boolean",
      "value": "false"
     },
     {
      "name": "columnAppendBottom",
      "type": "Boolean",
      "value": "false"
     },
     {
      "name": "columnBorder",
      "type": "Boolean",
      "value": "false"
     },
     {
      "name": "columnBigBorder",
      "type": "Boolean",
      "value": "false"
     },
     {
      "name": "height",
      "type": "Integer",
      "value": ""
     },
     {
      "name": "backgroundColor",
      "type": "Color",
      "value": ""
     },
     {
      "name": "roundCorners",
      "type": "RoundCorners",
      "value": ""
     },
     {
      "name": "textAlign",
      "type": "TextAlign",
      "value": ""
     },
     {
      "name": "cssClass",
      "type": "String",
      "value": ""
     }
    ],
    "type": "LayoutColumn",
    "typeDesc": "Column"
   },
   {
    "id": "bf718d4a-a6a1-dd2b-d315-9679afed70de",
    "parent": "UnIqEiD",
    "properties": [
     {
      "name": "name",
      "type": "Id",
      "value": "dialogObject"
     },
     {
      "name": "height",
      "type": "Integer",
      "value": ""
     },
     {
      "name": "backgroundColor",
      "type": "Color",
      "value": ""
     },
     {
      "name": "roundCorners",
      "type": "RoundCorners",
      "value": ""
     },
     {
      "name": "textAlign",
      "type": "TextAlign",
      "value": ""
     },
     {
      "name": "cssClass",
      "type": "String",
      "value": ""
     }
    ],
    "type": "LayoutRow",
    "typeDesc": "Row"
   }
  ],
  "title": "main"
 }
}